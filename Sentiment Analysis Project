{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IamAnindyaSharma/Prod-Projects/blob/main/Welcome_To_Colab.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "# Upload PDFs\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "id": "iau3HTixnPO2",
        "outputId": "c00d1b81-9750-444b-9fc7-f6a5c1ef5d32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0491d6c6-23f8-457e-88dc-fd356aa402bc\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0491d6c6-23f8-457e-88dc-fd356aa402bc\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving q2fy21-transcript.pdf to q2fy21-transcript.pdf\n",
            "Saving Q2FY23_Transcript.pdf to Q2FY23_Transcript.pdf\n",
            "Saving Q3FY19-Transcript.pdf to Q3FY19-Transcript.pdf\n",
            "Saving Q3FY20-23-transcript.pdf to Q3FY20-23-transcript.pdf\n",
            "Saving Q3FY20-Transcript.pdf to Q3FY20-Transcript.pdf\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install PyMuPDF\n",
        "\n",
        "import fitz  # PyMuPDF\n",
        "import json\n",
        "import os\n",
        "\n",
        "# Function to extract text from a single PDF\n",
        "def extract_text_from_pdf(pdf_path):\n",
        "    text = \"\"\n",
        "    with fitz.open(pdf_path) as pdf:\n",
        "        for page_num in range(pdf.page_count):\n",
        "            page = pdf[page_num]\n",
        "            text += page.get_text()\n",
        "    return text\n",
        "\n",
        "# Loop through uploaded PDFs and save the extracted text in individual text files\n",
        "text_data = {}\n",
        "for pdf_name in uploaded.keys():\n",
        "    text = extract_text_from_pdf(pdf_name)\n",
        "    text_data[pdf_name] = text\n",
        "    # Save each PDF text to a separate text file\n",
        "    with open(f'{pdf_name}.txt', 'w') as txt_file:\n",
        "        txt_file.write(text)\n",
        "    print(f\"Text from {pdf_name} saved to {pdf_name}.txt\")\n"
      ],
      "metadata": {
        "id": "nZzfh-WyottJ",
        "outputId": "1580ecf9-b046-43a6-ecb8-dd030f4411dc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: PyMuPDF in /usr/local/lib/python3.10/dist-packages (1.24.13)\n",
            "Text from q2fy21-transcript.pdf saved to q2fy21-transcript.pdf.txt\n",
            "Text from Q2FY23_Transcript.pdf saved to Q2FY23_Transcript.pdf.txt\n",
            "Text from Q3FY19-Transcript.pdf saved to Q3FY19-Transcript.pdf.txt\n",
            "Text from Q3FY20-23-transcript.pdf saved to Q3FY20-23-transcript.pdf.txt\n",
            "Text from Q3FY20-Transcript.pdf saved to Q3FY20-Transcript.pdf.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install nltk\n",
        "\n",
        "import nltk\n",
        "import json\n",
        "import os\n",
        "from datetime import datetime\n",
        "\n",
        "nltk.download('punkt')\n",
        "\n",
        "# Define metadata information for each file\n",
        "# You can update these details as needed for your project\n",
        "metadata_info = {\n",
        "    \"/content/q2fy21-transcript.pdf.txt\": {\"company_name\": \"Company A\", \"ticker_symbol\": \"CMPA\", \"date\": \"2023-07-15\"},\n",
        "    \"/content/Q2FY23_Transcript.pdf.txt\": {\"company_name\": \"Company B\", \"ticker_symbol\": \"CMPB\", \"date\": \"2023-07-16\"},\n",
        "    \"/content/Q3FY19-Transcript.pdf.txt\": {\"company_name\": \"Company C\", \"ticker_symbol\": \"CMPC\", \"date\": \"2023-07-17\"},\n",
        "    \"/content/Q3FY20-23-transcript.pdf.txt\": {\"company_name\": \"Company D\", \"ticker_symbol\": \"CMPD\", \"date\": \"2023-07-18\"},\n",
        "    \"/content/Q3FY20-Transcript.pdf.txt\": {\"company_name\": \"Company E\", \"ticker_symbol\": \"CMPE\", \"date\": \"2023-07-19\"},\n",
        "}\n",
        "\n",
        "# Initialize list to hold JSON data for all transcripts\n",
        "json_data = []\n",
        "\n",
        "# Process each text file in the metadata dictionary\n",
        "for file_name, meta in metadata_info.items():\n",
        "    # Load text from each file\n",
        "    with open(file_name, 'r') as file:\n",
        "        text = file.read()\n",
        "\n",
        "    # Tokenize text into sentences\n",
        "    sentences = nltk.sent_tokenize(text)\n",
        "\n",
        "    # Extract metadata\n",
        "    date_obj = datetime.strptime(meta[\"date\"], \"%Y-%m-%d\")\n",
        "    company_data = {\n",
        "        \"Company Name\": meta[\"company_name\"],\n",
        "        \"Date\": meta[\"date\"],\n",
        "        \"Month\": date_obj.strftime(\"%B\"),\n",
        "        \"Year\": date_obj.year,\n",
        "        \"Ticker Symbol\": meta[\"ticker_symbol\"],\n",
        "        \"Array of Sentences\": sentences\n",
        "    }\n",
        "\n",
        "    # Append the structured data to JSON list\n",
        "    json_data.append(company_data)\n",
        "\n",
        "# Save the complete data to a JSON file\n",
        "with open('transcripts_with_metadata2.json', 'w') as json_file:\n",
        "    json.dump(json_data, json_file, indent=4)\n",
        "\n",
        "print(\"All text files converted to JSON format with metadata and saved as transcripts_with_metadata.json\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "MZVlqdFvo9Qo",
        "outputId": "f82c2ea1-e783-4614-b789-dfb3526c8f21",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.8.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk) (8.1.7)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk) (1.4.2)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk) (2024.9.11)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk) (4.66.6)\n",
            "All text files converted to JSON format with metadata and saved as transcripts_with_metadata.json\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import json\n",
        "\n",
        "# Load the JSON data\n",
        "with open('transcripts_with_metadata.json', 'r') as json_file:\n",
        "    json_data = json.load(json_file)\n",
        "\n",
        "# Convert JSON to DataFrame\n",
        "df = pd.json_normalize(json_data, record_path='Array of Sentences',\n",
        "                       meta=['Company Name', 'Date', 'Month', 'Year', 'Ticker Symbol'],\n",
        "                       errors='ignore')\n",
        "\n",
        "# Rename the column from Array of Sentences to Sentence for clarity\n",
        "df = df.rename(columns={0: 'Sentence'})\n",
        "\n",
        "# Display the DataFrame\n",
        "print(df.head)\n"
      ],
      "metadata": {
        "id": "I8sm5LB4qdqJ",
        "outputId": "60400ebd-e746-4e5d-f682-d7fa161be7b4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<bound method NDFrame.head of                                                Sentence Company Name  \\\n",
            "0      \\n \\nPage 1 of 22 \\n \\n \\n   Kotak Mahindra B...    Company A   \n",
            "1     – PRESIDENT – GROUP TREASURY \\nMR. VIRAT DIWAN...    Company A   \n",
            "2     Actual results may vary significantly from the...    Company A   \n",
            "3     These risks and uncertainties include \\nthe ef...    Company A   \n",
            "4     Kotak Mahindra does not \\nundertake to update ...    Company A   \n",
            "...                                                 ...          ...   \n",
            "2578  Let's pray for that and let's all of us work h...    Company E   \n",
            "2579         Thank you very much, ladies and gentlemen.    Company E   \n",
            "2580                            Moderator: \\nThank you.    Company E   \n",
            "2581  Ladies and gentlemen, on behalf of Kotak Mahin...    Company E   \n",
            "2582  Thank you all for joining us and you may now d...    Company E   \n",
            "\n",
            "            Date Month  Year Ticker Symbol  \n",
            "0     2023-07-15  July  2023          CMPA  \n",
            "1     2023-07-15  July  2023          CMPA  \n",
            "2     2023-07-15  July  2023          CMPA  \n",
            "3     2023-07-15  July  2023          CMPA  \n",
            "4     2023-07-15  July  2023          CMPA  \n",
            "...          ...   ...   ...           ...  \n",
            "2578  2023-07-19  July  2023          CMPE  \n",
            "2579  2023-07-19  July  2023          CMPE  \n",
            "2580  2023-07-19  July  2023          CMPE  \n",
            "2581  2023-07-19  July  2023          CMPE  \n",
            "2582  2023-07-19  July  2023          CMPE  \n",
            "\n",
            "[2583 rows x 6 columns]>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the DataFrame from the JSON data\n",
        "import pandas as pd\n",
        "\n",
        "# Replace with the path to your JSON file if needed\n",
        "df = pd.read_json('transcripts_with_metadata2.json')\n",
        "\n",
        "# Check column names\n",
        "print(\"Column Names:\", df.columns)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "id": "zex0daA0qxU5",
        "outputId": "76d2d421-f169-4700-95e9-c0d1ad478001",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Column Names: Index(['Company Name', 'Date', 'Month', 'Year', 'Ticker Symbol',\n",
            "       'Array of Sentences'],\n",
            "      dtype='object')\n",
            "  Company Name       Date Month  Year Ticker Symbol  \\\n",
            "0    Company A 2023-07-15  July  2023          CMPA   \n",
            "1    Company B 2023-07-16  July  2023          CMPB   \n",
            "2    Company C 2023-07-17  July  2023          CMPC   \n",
            "3    Company D 2023-07-18  July  2023          CMPD   \n",
            "4    Company E 2023-07-19  July  2023          CMPE   \n",
            "\n",
            "                                  Array of Sentences  \n",
            "0  [ \\n \\nPage 1 of 24 \\n \\n \\n \\n“Kotak Mahindra...  \n",
            "1  [ \\n \\n \\n \\nPage 1 of 24 \\n \\n \\n \\n“Kotak Ma...  \n",
            "2  [ \\n \\nPage 1 of 19 \\n \\n \\nKotak Mahindra Ban...  \n",
            "3  [Page 1 of 24 \\n \\n \\n \\n \\nKotak Mahindra Ban...  \n",
            "4  [ \\n \\nPage 1 of 18 \\n \\n \\n“Kotak Mahindra Ba...  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sentence_transformers import SentenceTransformer\n",
        "import pandas as pd\n",
        "import pickle\n",
        "\n",
        "# Load the JSON data as DataFrame\n",
        "df = pd.read_json('transcripts_with_metadata.json')\n",
        "\n",
        "# Expand the 'Array of Sentences' column so each sentence gets its own row\n",
        "df = df.explode('Array of Sentences').reset_index(drop=True)\n",
        "\n",
        "# Rename the column for easier access\n",
        "df = df.rename(columns={'Array of Sentences': 'Sentence'})\n",
        "\n",
        "# Initialize the SBERT model\n",
        "model = SentenceTransformer('all-MiniLM-L6-v2')\n",
        "\n",
        "# Generate embeddings for each sentence\n",
        "df['Embedding'] = df['Sentence'].apply(lambda x: model.encode(x) if isinstance(x, str) else None)\n",
        "\n",
        "# Save the DataFrame as a pickle file\n",
        "with open('transcripts_with_embeddings.pkl', 'wb') as file:\n",
        "    pickle.dump(df, file)\n",
        "\n",
        "print(\"DataFrame with embeddings has been pickled and saved as transcripts_with_embeddings.pkl\")\n",
        "\n",
        "# Load the JSON data as DataFrame\n",
        "df2 = pd.read_json('transcripts_with_metadata2.json')\n",
        "\n",
        "# Expand the 'Array of Sentences' column so each sentence gets its own row\n",
        "df2 = df2.explode('Array of Sentences').reset_index(drop=True)\n",
        "\n",
        "# Rename the column for easier access\n",
        "df2 = df2.rename(columns={'Array of Sentences': 'Sentence'})\n",
        "\n",
        "# Initialize the SBERT model\n",
        "model = SentenceTransformer('all-MiniLM-L6-v2')\n",
        "\n",
        "# Generate embeddings for each sentence\n",
        "df2['Embedding'] = df2['Sentence'].apply(lambda x: model.encode(x) if isinstance(x, str) else None)\n",
        "\n",
        "# Save the DataFrame as a pickle file\n",
        "with open('transcripts_with_embeddings2.pkl', 'wb') as file:\n",
        "    pickle.dump(df2, file)\n",
        "\n",
        "print(\"DataFrame with embeddings has been pickled and saved as transcripts_with_embeddings2.pkl\")\n"
      ],
      "metadata": {
        "id": "FCvZ0zuHr1ux",
        "outputId": "e9288811-2515-4368-83b9-cf8a387ccd13",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame with embeddings has been pickled and saved as transcripts_with_embeddings.pkl\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame with embeddings has been pickled and saved as transcripts_with_embeddings2.pkl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA\n",
        "import pandas as pd\n",
        "import pickle\n",
        "\n",
        "# Load the pickled DataFrame with embeddings\n",
        "with open('transcripts_with_embeddings.pkl', 'rb') as file:\n",
        "    df = pickle.load(file)\n",
        "\n",
        "# Extract the embeddings into a separate variable for PCA\n",
        "embeddings = df['Embedding'].tolist()\n",
        "\n",
        "# Initialize PCA to reduce to 2 dimensions\n",
        "pca = PCA(n_components=2)\n",
        "reduced_embeddings = pca.fit_transform(embeddings)\n",
        "\n",
        "# Add the reduced dimensions to the DataFrame\n",
        "df['D1'] = reduced_embeddings[:, 0]\n",
        "df['D2'] = reduced_embeddings[:, 1]\n",
        "\n",
        "# Save the updated DataFrame with dimensionality reduction to a new pickle file\n",
        "with open('transcripts_with_reduced_embeddings2.pkl', 'wb') as file:\n",
        "    pickle.dump(df2, file)\n",
        "\n",
        "print(\"Dimensionality reduction complete. DataFrame saved as transcripts_with_reduced_embeddings.pkl\")\n",
        "\n",
        "# Load the pickled DataFrame with embeddings\n",
        "with open('transcripts_with_embeddings2.pkl', 'rb') as file:\n",
        "    df2 = pickle.load(file)\n",
        "\n",
        "# Extract the embeddings into a separate variable for PCA\n",
        "embeddings = df2['Embedding'].tolist()\n",
        "\n",
        "# Initialize PCA to reduce to 2 dimensions\n",
        "pca = PCA(n_components=2)\n",
        "reduced_embeddings = pca.fit_transform(embeddings)\n",
        "\n",
        "# Add the reduced dimensions to the DataFrame\n",
        "df2['D3'] = reduced_embeddings[:, 0]\n",
        "df2['D4'] = reduced_embeddings[:, 1]\n",
        "\n",
        "# Save the updated DataFrame with dimensionality reduction to a new pickle file\n",
        "with open('transcripts_with_reduced_embeddings2.pkl', 'wb') as file:\n",
        "    pickle.dump(df, file)\n",
        "\n",
        "print(\"Dimensionality reduction complete. DataFrame saved as transcripts_with_reduced_embeddings2.pkl\")\n"
      ],
      "metadata": {
        "id": "dkvPJ4k9s1Md",
        "outputId": "d02da141-805c-4363-9412-19a6a6249e05",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dimensionality reduction complete. DataFrame saved as transcripts_with_reduced_embeddings.pkl\n",
            "Dimensionality reduction complete. DataFrame saved as transcripts_with_reduced_embeddings2.pkl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install transformers\n",
        "\n",
        "from transformers import pipeline\n",
        "import pandas as pd\n",
        "import pickle\n",
        "\n",
        "# Load the pickled DataFrame with reduced embeddings\n",
        "with open('transcripts_with_reduced_embeddings.pkl', 'rb') as file:\n",
        "    df = pickle.load(file)\n",
        "\n",
        "# Initialize FinBERT sentiment analysis pipeline\n",
        "sentiment_analyzer = pipeline('sentiment-analysis', model=\"ProsusAI/finbert\")\n",
        "\n",
        "# Define a function to get sentiment label\n",
        "def get_sentiment(sentence):\n",
        "    # Handle empty or NaN sentences\n",
        "    if pd.isna(sentence):\n",
        "        return None\n",
        "    result = sentiment_analyzer(sentence)\n",
        "    return result[0]['label']\n",
        "\n",
        "# Apply sentiment analysis to each sentence\n",
        "df['Sentiment'] = df['Sentence'].apply(get_sentiment)\n",
        "\n",
        "# Save the updated DataFrame with sentiment labels to a new pickle file\n",
        "with open('transcripts_with_sentiment.pkl', 'wb') as file:\n",
        "    pickle.dump(df, file)\n",
        "\n",
        "print(\"Sentiment classification complete. DataFrame saved as transcripts_with_sentiment.pkl\")\n",
        "\n",
        "# Load the pickled DataFrame with reduced embeddings\n",
        "with open('transcripts_with_reduced_embeddings2.pkl', 'rb') as file:\n",
        "    df2 = pickle.load(file)\n",
        "\n",
        "# Initialize FinBERT sentiment analysis pipeline\n",
        "sentiment_analyzer = pipeline('sentiment-analysis', model=\"ProsusAI/finbert\")\n",
        "\n",
        "# Define a function to get sentiment label\n",
        "def get_sentiment(sentence):\n",
        "    # Handle empty or NaN sentences\n",
        "    if pd.isna(sentence):\n",
        "        return None\n",
        "    result = sentiment_analyzer(sentence)\n",
        "    return result[0]['label']\n",
        "\n",
        "# Apply sentiment analysis to each sentence\n",
        "df2['Sentiment'] = df2['Sentence'].apply(get_sentiment)\n",
        "\n",
        "# Save the updated DataFrame with sentiment labels to a new pickle file\n",
        "with open('transcripts_with_sentiment2.pkl', 'wb') as file:\n",
        "    pickle.dump(df, file)\n",
        "\n",
        "print(\"Sentiment classification complete. DataFrame saved as transcripts_with_sentiment2.pkl\")\n"
      ],
      "metadata": {
        "id": "1LtDjzjItEeP",
        "outputId": "f80dfbea-f3ab-42b9-c961-a7262a16177f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.44.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.16.1)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.24.7)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.9.11)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.5)\n",
            "Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.6)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.10.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.8.30)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sentiment classification complete. DataFrame saved as transcripts_with_sentiment.pkl\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sentiment classification complete. DataFrame saved as transcripts_with_sentiment2.pkl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import pickle\n",
        "\n",
        "# Load the DataFrame with sentiment labels\n",
        "with open('transcripts_with_sentiment.pkl', 'rb') as file:\n",
        "    df = pickle.load(file)\n",
        "\n",
        "# Ensure Date column is in datetime format\n",
        "df['Date'] = pd.to_datetime(df['Date'], errors='coerce')\n",
        "\n",
        "# Drop rows with invalid dates if any (optional, but may help if date parsing is inconsistent)\n",
        "df = df.dropna(subset=['Date'])\n",
        "\n",
        "# Extract the quarter and year from Date\n",
        "df['Quarter'] = df['Date'].dt.to_period('Q')\n",
        "\n",
        "# Filter for positive and negative sentiments only\n",
        "df_filtered = df[df['Sentiment'].isin(['positive', 'negative'])]\n",
        "\n",
        "# Calculate positive and negative counts per quarter\n",
        "sentiment_counts = df_filtered.groupby(['Quarter', 'Sentiment']).size().unstack(fill_value=0)\n",
        "\n",
        "# Calculate the positive sentiment polarity per quarter\n",
        "sentiment_counts['Positive Sentiment Polarity'] = sentiment_counts['positive'] / (sentiment_counts['positive'] + sentiment_counts['negative'])\n",
        "\n",
        "# Check the summary to ensure all quarters are captured\n",
        "print(sentiment_counts)\n",
        "\n",
        "# Load the DataFrame with sentiment labels\n",
        "with open('transcripts_with_sentiment2.pkl', 'rb') as file:\n",
        "    df2 = pickle.load(file)\n",
        "\n",
        "# Ensure Date column is in datetime format\n",
        "df2['Date'] = pd.to_datetime(df2['Date'], errors='coerce')\n",
        "\n",
        "# Drop rows with invalid dates if any (optional, but may help if date parsing is inconsistent)\n",
        "df2 = df2.dropna(subset=['Date'])\n",
        "\n",
        "# Extract the quarter and year from Date\n",
        "df2['Quarter'] = df2['Date'].dt.to_period('Q')\n",
        "\n",
        "# Filter for positive and negative sentiments only\n",
        "df2_filtered = df2[df2['Sentiment'].isin(['positive', 'negative'])]\n",
        "\n",
        "# Calculate positive and negative counts per quarter\n",
        "sentiment_counts2 = df2_filtered.groupby(['Quarter', 'Sentiment']).size().unstack(fill_value=0)\n",
        "\n",
        "# Calculate the positive sentiment polarity per quarter\n",
        "sentiment_counts2['Positive Sentiment Polarity'] = sentiment_counts2['positive'] / (sentiment_counts2['positive'] + sentiment_counts2['negative'])\n",
        "\n",
        "# Check the summary to ensure all quarters are captured\n",
        "print(sentiment_counts2)\n",
        "\n",
        "# Plot the positive sentiment polarity over time\n",
        "plt.figure(figsize=(10, 6))\n",
        "sentiment_counts['Positive Sentiment Polarity'].plot(kind='line', marker='o')\n",
        "sentiment_counts2['Positive Sentiment Polarity'].plot(kind='line', marker='o')\n",
        "plt.title('Quarterly Positive Sentiment Polarity Over Time')\n",
        "plt.xlabel('Quarter')\n",
        "plt.ylabel('Positive Sentiment Polarity')\n",
        "plt.grid()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "xtQA3HprvmQP",
        "outputId": "15f56709-79af-400f-dc44-f6c65f3375e1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 746
        }
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sentiment  negative  positive  Positive Sentiment Polarity\n",
            "Quarter                                                   \n",
            "2023Q3          190       669                     0.778813\n",
            "Sentiment  negative  positive  Positive Sentiment Polarity\n",
            "Quarter                                                   \n",
            "2023Q3          190       669                     0.778813\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/pandas/plotting/_matplotlib/core.py:1561: UserWarning: Attempting to set identical low and high xlims makes transformation singular; automatically expanding.\n",
            "  ax.set_xlim(left, right)\n",
            "/usr/local/lib/python3.10/dist-packages/pandas/plotting/_matplotlib/core.py:1561: UserWarning: Attempting to set identical low and high xlims makes transformation singular; automatically expanding.\n",
            "  ax.set_xlim(left, right)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(sentiment_summary)\n"
      ],
      "metadata": {
        "id": "uyHy3TJXwOiT",
        "outputId": "b182d4e6-b415-4586-ac45-9058b1952945",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sentiment  negative  positive  Positive Sentiment Polarity\n",
            "Quarter                                                   \n",
            "2023Q3          190       669                     0.778813\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df['Quarter'].unique())\n"
      ],
      "metadata": {
        "id": "Qan8sDoLwVTq",
        "outputId": "c5ded593-a45a-41ca-dd2c-63740d255634",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<PeriodArray>\n",
            "['2023Q3']\n",
            "Length: 1, dtype: period[Q-DEC]\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colab",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
